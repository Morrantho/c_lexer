#ifndef __ASCII_H__
#define __ASCII_H__

#define ASCII_CODES \
	X( ASCII_EOF, LEX_LEOF ) \
	X( ASCII_NUL, LEX_LSKIP ) \
	X( ASCII_SOH, LEX_LSKIP ) \
	X( ASCII_STX, LEX_LSKIP ) \
	X( ASCII_ETX, LEX_LSKIP ) \
	X( ASCII_EOT, LEX_LSKIP ) \
	X( ASCII_ENQ, LEX_LSKIP ) \
	X( ASCII_ACK, LEX_LSKIP ) \
	X( ASCII_BEL, LEX_LSKIP ) \
	X( ASCII_BS, LEX_LSKIP ) \
	X( ASCII_TAB, LEX_LSKIP ) \
	X( ASCII_LF, LEX_LSKIP ) \
	X( ASCII_VT, LEX_LSKIP ) \
	X( ASCII_FF, LEX_LSKIP ) \
	X( ASCII_CR, LEX_LSKIP ) \
	X( ASCII_SO, LEX_LSKIP ) \
	X( ASCII_SI, LEX_LSKIP ) \
	X( ASCII_DLE, LEX_LSKIP ) \
	X( ASCII_DC1, LEX_LSKIP ) \
	X( ASCII_DC2, LEX_LSKIP ) \
	X( ASCII_DC3, LEX_LSKIP ) \
	X( ASCII_DC4, LEX_LSKIP ) \
	X( ASCII_NAK, LEX_LSKIP ) \
	X( ASCII_SYN, LEX_LSKIP ) \
	X( ASCII_ETB, LEX_LSKIP ) \
	X( ASCII_CAN, LEX_LSKIP ) \
	X( ASCII_EM, LEX_LSKIP ) \
	X( ASCII_SUB, LEX_LSKIP ) \
	X( ASCII_ESC, LEX_LSKIP ) \
	X( ASCII_FS, LEX_LSKIP ) \
	X( ASCII_GS, LEX_LSKIP ) \
	X( ASCII_RS, LEX_LSKIP ) \
	X( ASCII_US, LEX_LSKIP ) \
	X( ASCII_SPACE, LEX_LSKIP ) \
	X( ASCII_EXCLAMATION, LEX_LSKIP ) \
	X( ASCII_DOUBLE_QUOTE, LEX_LSTRING ) \
	X( ASCII_POUND, LEX_LSKIP ) \
	X( ASCII_DOLLAR, LEX_LSKIP ) \
	X( ASCII_PERCENT, LEX_LSKIP ) \
	X( ASCII_AMPERSAND, LEX_LSKIP ) \
	X( ASCII_SINGLE_QUOTE, LEX_LSKIP ) \
	X( ASCII_LEFT_PARENTHESIS, LEX_LSKIP ) \
	X( ASCII_RIGHT_PARENTHESIS, LEX_LSKIP ) \
	X( ASCII_ASTERISK, LEX_LSKIP ) \
	X( ASCII_PLUS, LEX_LSKIP ) \
	X( ASCII_COMMA, LEX_LSKIP ) \
	X( ASCII_MINUS, LEX_LSKIP ) \
	X( ASCII_PERIOD, LEX_LSKIP ) \
	X( ASCII_FORWARD_SLASH, LEX_LSKIP ) \
	X( ASCII_ZERO, LEX_LSKIP ) \
	X( ASCII_ONE, LEX_LDIGIT ) \
	X( ASCII_TWO, LEX_LDIGIT ) \
	X( ASCII_THREE, LEX_LDIGIT ) \
	X( ASCII_FOUR, LEX_LDIGIT ) \
	X( ASCII_FIVE, LEX_LDIGIT ) \
	X( ASCII_SIX, LEX_LDIGIT ) \
	X( ASCII_SEVEN, LEX_LDIGIT ) \
	X( ASCII_EIGHT, LEX_LDIGIT ) \
	X( ASCII_NINE, LEX_LDIGIT ) \
	X( ASCII_COLON, LEX_LSKIP ) \
	X( ASCII_SEMICOLON, LEX_LSKIP ) \
	X( ASCII_LESS_THAN, LEX_LSKIP ) \
	X( ASCII_EQUALS, LEX_LSKIP ) \
	X( ASCII_GREATER_THAN, LEX_LSKIP ) \
	X( ASCII_QUESTION, LEX_LSKIP ) \
	X( ASCII_AT, LEX_LSKIP ) \
	X( ASCII_UPPER_A, LEX_LLETTER ) \
	X( ASCII_UPPER_B, LEX_LLETTER ) \
	X( ASCII_UPPER_C, LEX_LLETTER ) \
	X( ASCII_UPPER_D, LEX_LLETTER ) \
	X( ASCII_UPPER_E, LEX_LLETTER ) \
	X( ASCII_UPPER_F, LEX_LLETTER ) \
	X( ASCII_UPPER_G, LEX_LLETTER ) \
	X( ASCII_UPPER_H, LEX_LLETTER ) \
	X( ASCII_UPPER_I, LEX_LLETTER ) \
	X( ASCII_UPPER_J, LEX_LLETTER ) \
	X( ASCII_UPPER_K, LEX_LLETTER ) \
	X( ASCII_UPPER_L, LEX_LLETTER ) \
	X( ASCII_UPPER_M, LEX_LLETTER ) \
	X( ASCII_UPPER_N, LEX_LLETTER ) \
	X( ASCII_UPPER_O, LEX_LLETTER ) \
	X( ASCII_UPPER_P, LEX_LLETTER ) \
	X( ASCII_UPPER_Q, LEX_LLETTER ) \
	X( ASCII_UPPER_R, LEX_LLETTER ) \
	X( ASCII_UPPER_S, LEX_LLETTER ) \
	X( ASCII_UPPER_T, LEX_LLETTER ) \
	X( ASCII_UPPER_U, LEX_LLETTER ) \
	X( ASCII_UPPER_V, LEX_LLETTER ) \
	X( ASCII_UPPER_W, LEX_LLETTER ) \
	X( ASCII_UPPER_X, LEX_LLETTER ) \
	X( ASCII_UPPER_Y, LEX_LLETTER ) \
	X( ASCII_UPPER_Z, LEX_LLETTER ) \
	X( ASCII_LEFT_SQUARE, LEX_LSKIP ) \
	X( ASCII_BACK_SLASH, LEX_LSKIP ) \
	X( ASCII_RIGHT_SQUARE, LEX_LSKIP ) \
	X( ASCII_CARAT, LEX_LSKIP ) \
	X( ASCII_UNDERSCORE, LEX_LLETTER ) \
	X( ASCII_GRAVE, LEX_LSKIP ) \
	X( ASCII_LOWER_A, LEX_LLETTER ) \
	X( ASCII_LOWER_B, LEX_LLETTER ) \
	X( ASCII_LOWER_C, LEX_LLETTER ) \
	X( ASCII_LOWER_D, LEX_LLETTER ) \
	X( ASCII_LOWER_E, LEX_LLETTER ) \
	X( ASCII_LOWER_F, LEX_LLETTER ) \
	X( ASCII_LOWER_G, LEX_LLETTER ) \
	X( ASCII_LOWER_H, LEX_LLETTER ) \
	X( ASCII_LOWER_I, LEX_LLETTER ) \
	X( ASCII_LOWER_J, LEX_LLETTER ) \
	X( ASCII_LOWER_K, LEX_LLETTER ) \
	X( ASCII_LOWER_L, LEX_LLETTER ) \
	X( ASCII_LOWER_M, LEX_LLETTER ) \
	X( ASCII_LOWER_N, LEX_LLETTER ) \
	X( ASCII_LOWER_O, LEX_LLETTER ) \
	X( ASCII_LOWER_P, LEX_LLETTER ) \
	X( ASCII_LOWER_Q, LEX_LLETTER ) \
	X( ASCII_LOWER_R, LEX_LLETTER ) \
	X( ASCII_LOWER_S, LEX_LLETTER ) \
	X( ASCII_LOWER_T, LEX_LLETTER ) \
	X( ASCII_LOWER_U, LEX_LLETTER ) \
	X( ASCII_LOWER_V, LEX_LLETTER ) \
	X( ASCII_LOWER_W, LEX_LLETTER ) \
	X( ASCII_LOWER_X, LEX_LLETTER ) \
	X( ASCII_LOWER_Y, LEX_LLETTER ) \
	X( ASCII_LOWER_Z, LEX_LLETTER ) \
	X( ASCII_LEFT_CURLY, LEX_LSKIP ) \
	X( ASCII_PIPE, LEX_LSKIP ) \
	X( ASCII_RIGHT_CURLY, LEX_LSKIP ) \
	X( ASCII_TILDE, LEX_LSKIP ) \
	X( ASCII_DEL, LEX_LSKIP )

#define X( E, LBL ) E,
typedef enum ascii_t{ ASCII_CODES N_ASCII_CODES }ascii_t, *ascii_p;
#undef X

#endif/*__ASCII_H__*/
